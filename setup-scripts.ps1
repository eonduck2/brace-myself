@"
{
  "presets": ["@babel/preset-env", "@babel/preset-react", "@babel/preset-typescript"]
}
"@ | Out-File -FilePath .babelrc -Encoding utf8

@"
import path from "path";
import HtmlWebpackPlugin from "html-webpack-plugin";
import { Configuration } from "webpack";
import { Configuration as DevServerConfiguration } from "webpack-dev-server";
// @ts-ignore
import { BundleAnalyzerPlugin } from "webpack-bundle-analyzer";
// import { VanillaExtractPlugin } from "@vanilla-extract/webpack-plugin";
// import MiniCssExtractPlugin from "mini-css-extract-plugin";

const ___dirname = path.resolve();

const config: Configuration & { devServer?: DevServerConfiguration } = {
  mode: "development",
  entry: path.join(___dirname, "src", "client", "index.tsx"),
  output: {
    path: path.join(___dirname, "dist"),
    filename: "bundle.js",
  },
  resolve: {
    extensions: [".js", ".ts", ".jsx", ".tsx"],
  },
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: "ts-loader",
        exclude: /node_modules/,
      },
      {
        test: /\.(js|jsx|ts|tsx)$/,
        // test: /\.jsx?$/,
        // use: "babel-loader",
        // options: {
        // presets: [
        //   "@babel/preset-env",
        //   "@babel/preset-react",
        //   "@babel/preset-typescript",
        // ],
        // },
        use: {
          loader: "babel-loader",
          options: {
            presets: [
              "@babel/preset-env",
              "@babel/preset-react",
              "@babel/preset-typescript",
            ],
          },
        },
        exclude: /node_modules/,
      },
      {
        test: /\.css$/,
        use: ["style-loader", "css-loader", "postcss-loader"],
      },
      // {
      //   test: /\.css\.ts$/,
      //   use: [
      //     "style-loader",
      //     {
      //       loader: "@vanilla-extract/webpack-plugin/loader",
      //     },
      //   ],
      //   // include: path.join(___dirname, "src", "client"),
      // },
      // {
      //   test: /\.vanilla\.css$/i, // Targets only CSS files generated by vanilla-extract
      //   use: [
      //     MiniCssExtractPlugin.loader,
      //     {
      //       loader: "css-loader",
      //       options: {
      //         url: false, // Required as image imports should be handled via JS/TS import statements
      //       },
      //     },
      //   ],
      // },
    ],
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: path.join(___dirname, "public", "index.html"),
    }),

    // new BundleAnalyzerPlugin({
    //   analyzerMode: "static", // 'static'은 결과를 파일로 생성합니다. 'server'는 로컬 서버를 실행합니다.
    //   openAnalyzer: true, // 번들 분석기 결과를 자동으로 엽니다.
    //   reportFilename: "bundle-report.html", // 분석 결과 파일 이름
    // }),
    // new VanillaExtractPlugin(),
    // new MiniCssExtractPlugin({
    //   filename: "[name].css",
    // }),
  ],

  devtool: "source-map",
  devServer: {
    static: {
      directory: path.join(___dirname, "public"),
    },
    compress: true,
    port: 3000,
  },
};

export default config;








"@ | Out-File -FilePath webpack.config.ts -Encoding utf8

Write-Output "Setup complete!"